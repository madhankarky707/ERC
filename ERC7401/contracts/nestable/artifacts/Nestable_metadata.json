{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "AllChildrenRejected",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					}
				],
				"name": "ChildAccepted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					}
				],
				"name": "ChildProposed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "fromPending",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "toZero",
						"type": "bool"
					}
				],
				"name": "ChildTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fromTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "toTokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "NestTransfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					}
				],
				"name": "acceptChild",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "addChild",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxChildrenBurns",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "burnedChildren",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "childOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct IERC7401.Child",
						"name": "child",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					}
				],
				"name": "childrenOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct IERC7401.Child[]",
						"name": "children",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "directOwnerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isNFT",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "approved",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isApproved",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "destinationId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "nestTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "pendingChildOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct IERC7401.Child",
						"name": "child",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					}
				],
				"name": "pendingChildrenOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct IERC7401.Child[]",
						"name": "children",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxRejections",
						"type": "uint256"
					}
				],
				"name": "rejectAllChildren",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "destinationId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isPending",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "transferChild",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"AllChildrenRejected(uint256)": {
					"details": "Emitted when a token removes all a child tokens from its pending array.",
					"params": {
						"tokenId": "ID of the token that rejected all of the pending children"
					}
				},
				"Approval(address,address,uint256)": {
					"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
				},
				"ApprovalForAll(address,address,bool)": {
					"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
				},
				"ChildAccepted(uint256,uint256,address,uint256)": {
					"details": "Emitted when a parent token accepts a token from its pending array, migrating it to the active array.",
					"params": {
						"childAddress": "Address of the child token's collection smart contract",
						"childId": "ID of the child token in the child token's collection smart contract",
						"childIndex": "Index of the newly accepted child token in the parent token's active children array",
						"tokenId": "ID of the token that accepted a new child token"
					}
				},
				"ChildProposed(uint256,uint256,address,uint256)": {
					"details": "Emitted when a child NFT is added to a token's pending array.",
					"params": {
						"childAddress": "Address of the proposed child token's collection smart contract",
						"childId": "ID of the child token in the child token's collection smart contract",
						"childIndex": "Index of the proposed child token in the parent token's pending children array",
						"tokenId": "ID of the token that received a new pending child token"
					}
				},
				"ChildTransferred(uint256,uint256,address,uint256,bool,bool)": {
					"details": "Emitted when a token transfers a child from itself, transferring ownership to the root owner.",
					"params": {
						"childAddress": "Address of the child token's collection smart contract",
						"childId": "ID of the child token in the child token's collection smart contract",
						"childIndex": "Index of a child in the array from which it is being transferred",
						"fromPending": "A boolean value signifying whether the token was in the pending child tokens array (`true`) or  in the active child tokens array (`false`)",
						"toZero": "A boolean value signifying whether the token is being transferred to the `0x0` address (`true`) or  not (`false`)",
						"tokenId": "ID of the token that transferred a child token"
					}
				},
				"NestTransfer(address,address,uint256,uint256,uint256)": {
					"details": "Emitted when `tokenId` token is transferred from `from` to `to`.",
					"params": {
						"from": "Address of the previous immediate owner, which is a smart contract if the token was nested.",
						"fromTokenId": "ID of the previous parent token. If the token was not nested before, the value should be `0`",
						"to": "Address of the new immediate owner, which is a smart contract if the token is being nested.",
						"toTokenId": "ID of the new parent token. If the token is not being nested, the value should be `0`",
						"tokenId": "ID of the token being transferred"
					}
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
				}
			},
			"kind": "dev",
			"methods": {
				"acceptChild(uint256,uint256,address,uint256)": {
					"details": "This moves the child token from parent token's pending child tokens array into the active child tokens  array.",
					"params": {
						"childAddress": "Address of the collection smart contract of the child token expected to be located at the  specified index of the given parent token's pending children array",
						"childId": "ID of the child token expected to be located at the specified index of the given parent token's  pending children array",
						"childIndex": "Index of a child tokem in the given parent's pending children array",
						"parentId": "ID of the parent token for which the child token is being accepted"
					}
				},
				"addChild(uint256,uint256,bytes)": {
					"details": "This adds the child token into the given parent token's pending child tokens array.Requirements:  - `directOwnerOf` on the child contract must resolve to the called contract.  - the pending array of the parent contract must not be full.",
					"params": {
						"childId": "ID of the new proposed child token",
						"data": "Additional data with no specified format",
						"parentId": "ID of the parent token to receive the new child token"
					}
				},
				"approve(address,uint256)": {
					"details": "Gives permission to `to` to transfer `tokenId` token to another account.The approval is cleared when the token is transferred.Only a single account can be approved at a time, so approving the zero address clears previous approvals.Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist.Emits an {Approval} event.",
					"params": {
						"to": "Address receiving the approval",
						"tokenId": "ID of the token for which the approval is being granted"
					}
				},
				"balanceOf(address)": {
					"params": {
						"owner": "Address of the account being checked"
					},
					"returns": {
						"balance": "The balance of the given account"
					}
				},
				"burn(uint256)": {
					"details": "In case the token has any child tokens, the execution will be reverted.",
					"params": {
						"tokenId": "ID of the token to burn"
					}
				},
				"burn(uint256,uint256)": {
					"details": "When a token is burned, all of its child tokens are recursively burned as well.When specifying the maximum recursive burns, the execution will be reverted if there are more children to be  burned.Setting the `maxRecursiveBurn` value to 0 will only attempt to burn the specified token and revert if there  are any child tokens present.The approvals are cleared when the token is burned.Requirements:  - `tokenId` must exist.Emits a {Transfer} event.",
					"params": {
						"maxRecursiveBurns": "Maximum number of tokens to recursively burn",
						"tokenId": "ID of the token to burn"
					},
					"returns": {
						"burnedChildren": "Number of recursively burned children"
					}
				},
				"childOf(uint256,uint256)": {
					"details": "Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"index": "Index of the child token in the parent token's active child tokens array",
						"parentId": "ID of the parent token for which the child is being retrieved"
					},
					"returns": {
						"child": "A Child struct containing data about the specified child"
					}
				},
				"childrenOf(uint256)": {
					"details": "Returns array of Child structs existing for parent token.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"parentId": "ID of the parent token for which to retrieve the active child tokens"
					},
					"returns": {
						"children": "An array of Child structs containing the parent token's active child tokens"
					}
				},
				"directOwnerOf(uint256)": {
					"details": "If the immediate owner is another token, the address returned will be the parent token's collection address.",
					"params": {
						"tokenId": "ID of the token for which the RMRK owner is being retrieved"
					},
					"returns": {
						"isNFT": "The boolean value signifying whether the owner is an NFT or not",
						"owner_": "Address of the given token's owner",
						"parentId": "The ID of the parent token. Should be `0` if the owner is an externally owned account"
					}
				},
				"getApproved(uint256)": {
					"details": "Requirements:  - `tokenId` must exist.",
					"params": {
						"tokenId": "ID of the token to check for approval"
					},
					"returns": {
						"approved": "Address of the account approved to manage the token"
					}
				},
				"isApprovedForAll(address,address)": {
					"params": {
						"operator": "Address being checked for approval",
						"owner": "Address of the owner of the tokens"
					},
					"returns": {
						"isApproved": "A boolean value signifying whether the *operator* is allowed to manage the tokens of the *owner* (`true`)  or not (`false`)"
					}
				},
				"nestTransferFrom(address,address,uint256,uint256,bytes)": {
					"params": {
						"data": "Additional data with no specified format, sent in the addChild call",
						"destinationId": "ID of the token to receive the token being transferred",
						"from": "Address of the direct owner of the token to be transferred",
						"to": "Address of the receiving token's collection smart contract",
						"tokenId": "ID of the token being transferred"
					}
				},
				"ownerOf(uint256)": {
					"details": "The *root* owner of the token is an externally owned account (EOA). If the given token is child of another  NFT, this will return an EOA address. Otherwise, if the token is owned by an EOA, this EOA will be returned.",
					"params": {
						"tokenId": "ID of the token for which the *root* owner has been retrieved"
					},
					"returns": {
						"owner_": "The *root* owner of the token"
					}
				},
				"pendingChildOf(uint256,uint256)": {
					"details": "Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"index": "Index of the child token in the parent token's pending child tokens array",
						"parentId": "ID of the parent token for which the pending child token is being retrieved"
					},
					"returns": {
						"child": "A Child struct containting data about the specified child"
					}
				},
				"pendingChildrenOf(uint256)": {
					"details": "Returns array of pending Child structs existing for given parent.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"parentId": "ID of the parent token for which to retrieve the pending child tokens"
					},
					"returns": {
						"children": "An array of Child structs containing the parent token's pending child tokens"
					}
				},
				"rejectAllChildren(uint256,uint256)": {
					"details": "Removes the children from the pending array mapping.This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the  rootOwner of the previous parent.Requirements: Requirements: - `parentId` must exist",
					"params": {
						"maxRejections": "Maximum number of expected children to reject, used to prevent from rejecting children which  arrive just before this operation.",
						"parentId": "ID of the parent token for which to reject all of the pending tokens."
					}
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must exist and be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.Emits a {Transfer} event.",
					"params": {
						"from": "Address to transfer the tokens from",
						"to": "Address to transfer the tokens to",
						"tokenId": "ID of the token to transfer"
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must exist and be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.Emits a {Transfer} event.",
					"params": {
						"data": "Additional data without a specified format to be sent along with the token transaction",
						"from": "Address to transfer the tokens from",
						"to": "Address to transfer the tokens to",
						"tokenId": "ID of the token to transfer"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.Requirements: - The `operator` cannot be the caller.Emits an {ApprovalForAll} event.",
					"params": {
						"approved": "A boolean value signifying whether the approval is being granted (`true`) or (`revoked`)",
						"operator": "Address of the operator being managed"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
				},
				"transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": {
					"details": "When transferring a child token, the owner of the token is set to `to`, or is not updated in the event of  `to` being the `0x0` address.",
					"params": {
						"childAddress": "Address of the child token's collection smart contract.",
						"childId": "ID of the child token in its own collection smart contract.",
						"childIndex": "Index of a token we are transferring, in the array it belongs to (can be either active array or  pending array)",
						"data": "Additional data with no specified format, sent in call to `_to`",
						"destinationId": "ID of the token to receive this child token (MUST be 0 if the destination is not a token)",
						"isPending": "A boolean value indicating whether the child token being transferred is in the pending array of  the parent token (`true`) or in the active array (`false`)",
						"to": "Address to which to transfer the token to",
						"tokenId": "ID of the parent token from which the child token is being transferred"
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.Emits a {Transfer} event.",
					"params": {
						"from": "Address from which to transfer the token from",
						"to": "Address to which to transfer the token to",
						"tokenId": "ID of the token to transfer"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"AllChildrenRejected(uint256)": {
					"notice": "Used to notify listeners that all pending child tokens of a given token have been rejected."
				},
				"ChildAccepted(uint256,uint256,address,uint256)": {
					"notice": "Used to notify listeners that a new child token was accepted by the parent token."
				},
				"ChildProposed(uint256,uint256,address,uint256)": {
					"notice": "Used to notify listeners that a new token has been added to a given token's pending children array."
				},
				"ChildTransferred(uint256,uint256,address,uint256,bool,bool)": {
					"notice": "Used to notify listeners a child token has been transferred from parent token."
				},
				"NestTransfer(address,address,uint256,uint256,uint256)": {
					"notice": "Used to notify listeners that the token is being transferred."
				}
			},
			"kind": "user",
			"methods": {
				"acceptChild(uint256,uint256,address,uint256)": {
					"notice": "Used to accept a pending child token for a given parent token."
				},
				"addChild(uint256,uint256,bytes)": {
					"notice": "Used to add a child token to a given parent token."
				},
				"approve(address,uint256)": {
					"notice": "Used to grant a one-time approval to manage one's token."
				},
				"balanceOf(address)": {
					"notice": "Used to retrieve the number of tokens in `owner`'s account."
				},
				"burn(uint256)": {
					"notice": "Used to burn a given token."
				},
				"burn(uint256,uint256)": {
					"notice": "Used to burn a given token."
				},
				"childOf(uint256,uint256)": {
					"notice": "Used to retrieve a specific active child token for a given parent token."
				},
				"childrenOf(uint256)": {
					"notice": "Used to retrieve the active child tokens of a given parent token."
				},
				"directOwnerOf(uint256)": {
					"notice": "Used to retrieve the immediate owner of the given token."
				},
				"getApproved(uint256)": {
					"notice": "Used to retrieve the account approved to manage given token."
				},
				"isApprovedForAll(address,address)": {
					"notice": "Used to check if the given address is allowed to manage the tokens of the specified address."
				},
				"nestTransferFrom(address,address,uint256,uint256,bytes)": {
					"notice": "Used to transfer the token into another token."
				},
				"ownerOf(uint256)": {
					"notice": "Used to retrieve the *root* owner of a given token."
				},
				"pendingChildOf(uint256,uint256)": {
					"notice": "Used to retrieve a specific pending child token from a given parent token."
				},
				"pendingChildrenOf(uint256)": {
					"notice": "Used to retrieve the pending child tokens of a given parent token."
				},
				"rejectAllChildren(uint256,uint256)": {
					"notice": "Used to reject all pending children of a given parent token."
				},
				"safeTransferFrom(address,address,uint256)": {
					"notice": "Used to safely transfer a given token token from `from` to `to`."
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"notice": "Used to safely transfer a given token token from `from` to `to`."
				},
				"setApprovalForAll(address,bool)": {
					"notice": "Used to approve or remove `operator` as an operator for the caller."
				},
				"transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": {
					"notice": "Used to transfer a child token from a given parent token."
				},
				"transferFrom(address,address,uint256)": {
					"notice": "Transfers a given token from `from` to `to`."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ERC7401/nestable/Nestable.sol": "Nestable"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4",
			"license": "MIT",
			"urls": [
				"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7",
				"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49",
			"license": "MIT",
			"urls": [
				"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22",
				"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453",
				"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
				"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc",
				"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT"
			]
		},
		"contracts/ERC7401/interfaces/IERC7401.sol": {
			"keccak256": "0xd4ad8af29d2d31484d13a4e59c012321fc8d33b713c085b95518ade7915eade0",
			"license": "MIT",
			"urls": [
				"bzz-raw://67f5e309eeee757f3497037dee6e35a128aa41554a6bbb9ff8293ff34d4b25f2",
				"dweb:/ipfs/QmWc5X7quhkyPtDCtmdFa4dNQ8HdJ1jbKpaXs1VoyB9xay"
			]
		},
		"contracts/ERC7401/nestable/Nestable.sol": {
			"keccak256": "0xf9e2c886e98cdf68896251f8132ebba2c039bf549732e1cede84888fa3f5ecba",
			"license": "MIT",
			"urls": [
				"bzz-raw://b5c1c777e329a452818f890cfc434b13d1006d939267fae24e60be0a332976ac",
				"dweb:/ipfs/QmaxdiuFTpGGVyw4ZzU2JXcXLdj3JdQbvvY8jQocCRqQue"
			]
		}
	},
	"version": 1
}